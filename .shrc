# vim: ft=bash
# shellcheck shell=bash

export LANGUAGE=en_US.UTF-8
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

NIXPKGS_ALLOW_UNFREE=1
export NIXPKGS_ALLOW_UNFREE

NIX_PATH="$HOME/.nix-defexpr/channels"
export NIX_PATH

export NIX_SHELL_BASE_LEVEL=0

export XDG_RUNTIME_DIR="/run/user/$(id -u)"

export PODMAN_COMPOSE_WARNING_LOGS=false

# systemd variables
export SYSTEMD_PAGER=less
export PAGER=less

# Make python poetry work
export PYTHON_KEYRING_BACKEND=keyring.backends.null.Keyring

case "$-" in
*i*)
    # execute the rest in interactive mode
    ;;
*)
    return
    ;;
esac

# Autocompletion options
set show-all-if-ambiguous on
set show-all-if-unmodified on
set completion-ignore-case on

# Set vim mode
set -o vi
set editing-mode vi
set show-mode-in-prompt on
set vi-ins-mode-string +
set vi-cmd-mode-string :

# Remove note about using sudo
test -f ~/.sudo_as_admin_successful || touch ~/.sudo_as_admin_successful

# Ignore duplicates in .bash_history
export HISTCONTROL=ignoredups 2>/dev/null
# The  maximum  number of lines contained in the history file.
export HISTSIZE=99999 2>/dev/null
export HISTFILESIZE=99999 2>/dev/null
# Controls output of `history` command end enables time logging in .bash_history
export HISTTIMEFORMAT="%a, %d %b %Y %T %z " 2>/dev/null

function hs {
    grep -a "$*" "${HISTFILE}"
}

# Disable auto prompt for virtualenv
export VIRTUAL_ENV_DISABLE_PROMPT=yes

case $(uname) in
    FreeBSD)
        export MD5SUM='md5'
        export STAT_TIME='stat -f%m'
        export LS_OPTIONS='-G'
        if command -v dircolors >/dev/null 2>&1
        then
            eval "$(dircolors)"
        fi
        ;;
    Linux)
        export MD5SUM='md5sum'
        export STAT_TIME='stat -c%Z'
        export LS_OPTIONS='--color=auto'
        # shellcheck disable=SC2262
        alias grep='grep --color=auto'
        alias chown='chown --preserve-root'
        alias chmod='chmod --preserve-root'
        alias chgrp='chgrp --preserve-root'
        ;;
    *)
        export MD5SUM='md5sum'
        export STAT_TIME='stat -c%Z'
        ;;
esac

# Aliases
# http://askubuntu.com/questions/22037/aliases-not-available-when-using-sudo
alias sudo='sudo --preserve-env=PATH env '
# shellcheck disable=SC2262
alias mkdir='mkdir -p -v'
alias ls='ls $LS_OPTIONS'
alias ll='ls -lA $LS_OPTIONS'
if which eza >/dev/null 2>&1
then
    alias ls='eza $LS_OPTIONS'
    alias ll='eza -lA $LS_OPTIONS'
else
    alias ls='ls $LS_OPTIONS'
    alias ll='ls -lA $LS_OPTIONS'
fi
if which nvim >/dev/null 2>&1
then
    alias vi='nvim'
    alias vim='nvim'
fi
alias debuild='debuild -i; debuild clean'
alias acp='apt-cache policy'
alias acs='apt-cache show'
alias agi='apt-get -V install'
alias sqlplus='rlwrap sqlplus'
alias str='strace -s 999999999 -f -tt -T -y'
alias ltr='ltrace -s 999999999 -f -tt -T -n 2'
alias sudoe='sudo -E -H'
alias git-sup='git submodule init && git submodule update && git submodule status'

csv_view() {
    column -s, -t  "$1" | less -#2 -N -S
}

# safety features
alias cp='cp -i'
alias mv='mv -i'
alias ln='ln -i'

# Less options
LESS=' '
LESS=${LESS}'--line-numbers --ignore-case --underline-special '
LESS=${LESS}'--RAW-CONTROL-CHARS --chop-long-lines'
export LESS

# some functions
function mkdircd {
    mkdir "$1"
    cd "$1" || true
}

# add -i or -I (for newer coreutils versions) option to /bin/rm command
rmtemp=$(mktemp)
if rm -I "$rmtemp" &>/dev/null; then
    # shellcheck disable=SC2262
    alias rm="rm -I"
else
    alias rm="rm -i"
    rm "$rmtemp";
fi

EDITOR=nvim
export EDITOR

# kube config
if [ "${KUBECONFIG/:*}" = "$HOME/.kube/config" ]
then
    export KUBECONFIG=$HOME/.kube/config
    for file in "$HOME/.kube/configs"/*.yaml; do
      export KUBECONFIG=$KUBECONFIG:$file
    done
    export KUBE_FUZZY_PREVIEW_ENABLED=true
fi

alias kubie="BASHRC_ALREADY_EXECUTED= ZSHRC_ALREADY_EXECUTED= kubie"

# Non-interactive static and idempotent configs
path_push_left() {
    if [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]]; then
        path="$1:${PATH:+"$PATH"}"
        export PATH=${path}
    fi
}

path_push_right() {
    if [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]]; then
        path="${PATH:+"$PATH"}:$1"
        export PATH=${path}
    fi
}

ld_library_path_push_left() {
    if [ -d "$1" ] && [[ ":$LD_LIBRARY_PATH:" != *":$1:"* ]]; then
        ld_path="$1:${LD_LIBRARY_PATH:+"$LD_LIBRARY_PATH"}"
        export LD_LIBRARY_PATH=${ld_path}
    fi
}

ld_library_path_push_right() {
    if [ -d "$1" ] && [[ ":$LD_LIBRARY_PATH:" != *":$1:"* ]]; then
        ld_path="${LD_LIBRARY_PATH:+"$LD_LIBRARY_PATH"}:$1"
        export LD_LIBRARY_PATH=${ld_path}
    fi
}

path_push_right /bin
path_push_right /sbin
path_push_right /usr/local/sbin
path_push_right /usr/local/bin
path_push_right /usr/sbin
path_push_right /usr/bin
path_push_right /usr/games
path_push_right /usr/local/games
path_push_right /usr/lib/wsl/lib

# Add WSL lib directory to LD_LIBRARY_PATH
ld_library_path_push_right /usr/lib/wsl/lib


plz_path() {
    FILE=$1

    SHORTEST=100000
    SHORTEST_PATH=""

    BASE_DIR="${PLZ_BASE_DIR}"
    BASE_DIR_LEN=${#BASE_DIR}

    # Prune the base dir from the path if absolute
    if [[ "${FILE}" == "${BASE_DIR}"* ]]
    then
        B=${FILE:BASE_DIR_LEN}
    else
        B=${FILE}
    fi;

    for path in $(plz query changes "$B" --include_dependees=transitive | grep -v ":_")
    do
        AC_PATH=$(echo "$path" | tr : /)
        RELATIVE_PATH=$(realpath --relative-to="$BASE_DIR$B" "$BASE_DIR$AC_PATH")
        LENGTH=$(echo "$RELATIVE_PATH" | grep -o "../" | wc -l)
        if (( SHORTEST > LENGTH ));
        then
            SHORTEST=$LENGTH
            SHORTEST_PATH=$path
        fi;
    done

    echo "${SHORTEST_PATH}"
}

plz_build() {
    path=$(plz_path "$1")
    plz build "${path}"
}

plz_test() {
    path=$(plz_path "$1")
    plz test "${path}" "$2"
}

# shellcheck source=/dev/null
which plz >/dev/null 2>&1 && source <(plz --completion_script)

if [ "${GOPATH}" = "" ]
then
    [ -d "${HOME}/go" ] && export GOPATH="${HOME}/go"
fi
if [ "${GOBIN}" = "" ]
then
    [ -d "${HOME}/go/bin" ] && export GOBIN="${HOME}/go/bin"
fi

path_push_left "${GOBIN}"
[ -d "${KREW_ROOT:-$HOME/.krew}/bin" ] && path_push_left "${KREW_ROOT:-$HOME/.krew}/bin"

if which fd >/dev/null 2>&1
then
    export FZF_DEFAULT_COMMAND="fd --type f --strip-cwd-prefix"
    export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
fi

FZF_BASE="$(which fzf)"
export FZF_BASE

funsay() {
    if command -v ponysay >/dev/null 2>&1 && \
       command -v fortune >/dev/null 2>&1 && \
       command -v fmt >/dev/null 2>&1 && \
       command -v shuf >/dev/null 2>&1
    then
        fortune -a | fmt -80 -s | ponysay -F 2>/dev/null
    elif command -v cowsay >/dev/null 2>&1 && \
         command -v fortune >/dev/null 2>&1 && \
         command -v fmt >/dev/null 2>&1 && \
         command -v shuf >/dev/null 2>&1
    then
        # shellcheck disable=SC2046
        FORTUNE=$(fortune -a | fmt -80 -s | cowsay -"$(shuf -n 1 -e b d g p s t w y)" -f "$(shuf -n 1 -e $(cowsay -l | tail -n +2))" -n)
        echo -e "\e[1;36m$FORTUNE\n"
    fi
}

bzsh() {
    BWRAPPED=1 bwrap \
        --die-with-parent \
        --unshare-ipc \
        --unshare-cgroup \
        --share-net \
        --bind $HOME $HOME \
        --ro-bind /bin /bin \
        --ro-bind /sbin /sbin \
        --ro-bind /lib /lib \
        --ro-bind-try /lib64 /lib64 \
        --ro-bind /usr /usr \
        --bind /opt /opt \
        --ro-bind /snap /snap \
        --ro-bind /var /var \
        --ro-bind /nix /nix \
        --ro-bind /etc /etc \
        --ro-bind-try /run/systemd/resolve/ /run/systemd/resolve/ \
        --ro-bind-try $USR_LIB_LOCALES_PATH /usr/lib/locale \
        --dev /dev \
        --proc /proc \
        --tmpfs /tmp \
        --tmpfs /run/user/$(id -u) \
        --bind-try $TMP $TMP \
        --tmpfs $HOME/.local \
        --tmpfs $HOME/.config \
        --tmpfs $HOME/.cache \
        --tmpfs $HOME/.ssh \
        --tmpfs /etc/ssh/ssh_config.d \
        --bind-try $HOME/.config/environment.d $HOME/.config/environment.d \
        --bind-try $HOME/.config/autostart $HOME/.config/autostart \
        --bind-try $HOME/.config/flake8 $HOME/.config/flake8 \
        --bind-try $HOME/.config/gtk-3.0 $HOME/.config/gtk-3.0 \
        --bind-try $HOME/.config/i3 $HOME/.config/i3 \
        --bind-try $HOME/.config/i3status $HOME/.config/i3status \
        --bind-try $HOME/.config/nix $HOME/.config/nix \
        --bind-try $HOME/.config/nvim $HOME/.config/nvim \
        --bind-try $HOME/.config/github-copilot $HOME/.config/github-copilot \
        --bind-try $HOME/.config/systemd $HOME/.config/systemd \
        --bind-try $HOME/.config/pulse $HOME/.config/pulse \
        --bind-try $HOME/.config/pycodestyle $HOME/.config/pycodestyle \
        --bind-try $HOME/.config/sway $HOME/.config/sway \
        --bind-try $HOME/.config/swaylock $HOME/.config/swaylock \
        --bind-try $HOME/.config/terminator $HOME/.config/terminator \
        --bind-try $HOME/.config/tmux $HOME/.config/tmux \
        --bind-try $HOME/.config/waybar $HOME/.config/waybar \
        --bind-try $HOME/.config/wezterm $HOME/.config/wezterm \
        --bind-try $HOME/.config/lazygit $HOME/.config/lazygit \
        --bind-try $HOME/.config/containers $HOME/.config/containers \
        --bind-try $HOME/.config/Code $HOME/.config/Code \
        --bind-try $HOME/.local/bin $HOME/.local/bin \
        --bind-try $HOME/.local/include $HOME/.local/include \
        --bind-try $HOME/.local/lib $HOME/.local/lib \
        --bind-try $HOME/.local/share/oh-my-zsh $HOME/.local/share/oh-my-zsh \
        --bind-try $HOME/.local/share/bin $HOME/.local/share/bin \
        --bind-try $HOME/.local/share/nvim $HOME/.local/share/nvim \
        --bind-try $HOME/.local/share/fonts $HOME/.local/share/fonts \
        --bind-try $HOME/.local/state/nvim $HOME/.local/state/nvim \
        --bind-try $HOME/.local/state/nix $HOME/.local/state/nix \
        --bind-try $HOME/.local/share/flatpak/extension $HOME/.local/share/flatpak/extension \
        -- zsh
}
